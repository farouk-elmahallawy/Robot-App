{"version":3,"sources":["Components/RoboCard/RoboCard.js","Components/actions.js","App.js","reportWebVitals.js","Components/RoboCard/reducer.js","index.js"],"names":["RoboCard","this","props","requestRoboInfo","roboInfo","filter","robot","name","toLowerCase","includes","search","map","className","src","img","id","alt","email","React","Component","connect","state","reducer","searchChange","dispatch","type","fetch","then","response","json","data","payload","catch","error","HandelChange","e","target","value","placeholder","onChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","initialSearchState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"uQAKMA,E,uKACF,WACIC,KAAKC,MAAMC,oB,oBAEf,WAAS,IAAD,OAKR,OAJeF,KAAKC,MAAME,SACIC,QAAO,SAAAC,GACjC,OAAOA,EAAMC,KAAKC,cAAcC,SAAS,EAAKP,MAAMQ,OAAOF,kBAG5CG,KAAI,SAAAL,GACf,OACI,sBAAKM,UAAU,OAAf,UACI,qBAAKC,IAAK,EAAKX,MAAMY,IAAIR,EAAMS,GAAIC,IAAI,eACvC,mCAAMV,EAAMC,QACZ,kCAAKD,EAAMW,WAHYX,EAAMS,W,GAZ1BG,IAAMC,WAoCdC,eAbU,SAACC,GACrB,MAAM,CACFjB,SAASiB,EAAMC,QAAQlB,SACvBU,IAAIO,EAAMC,QAAQR,IAClBJ,OAAOW,EAAME,aAAab,WAGP,SAACc,GACxB,MAAM,CACNrB,gBAAiB,kBAAMqB,GCrCS,SAACA,GAClCA,EAAS,CAACC,KAAK,eACfC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIN,EAAS,CAACC,KAAK,UAAUM,QAAQD,OAC9CE,OAAM,SAAAC,GAAK,OAAIT,EAAS,CAACC,KAAK,SAAWM,QAAQE,cDoCvCb,CAA4CpB,G,MEvB3D,IAWeoB,eAXQ,SAACC,GACtB,MAAM,CACJX,OAAOW,EAAME,aAAab,WAGF,SAACc,GACzB,MAAM,CACJU,aAAc,SAACC,GAAD,OAAMX,EDlBE,SAACW,GACzB,MAAM,CACFV,KAAK,aACLM,QAAQI,EAAEC,OAAOC,OCeUH,CAAaC,QAIjCf,EAtBf,SAAalB,GACX,OACE,sBAAKU,UAAU,MAAf,UACM,gDACA,uBAAOa,KAAK,SAASa,YAAY,gCAAgCC,SAAU,SAACJ,GAAD,OAAOjC,EAAMgC,aAAaC,MACrG,qBAAKvB,UAAU,WAAf,SACE,cAAC,EAAD,YCDG4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,sBCPPO,EAAc,CACjB5C,SAAS,GACTU,IAAI,yBAQFmC,EAAoB,CACtBvC,OAAO,ICDLwC,EAAcC,YAAgB,CAAC7B,QDNd,WAAgC,IAA/BD,EAA8B,uDAAxB2B,EAAaI,EAAW,uCAClD,OAAOA,EAAO3B,MACV,IAAK,UAAY,kCAAUJ,GAAV,IAAgBjB,SAASgD,EAAOrB,UACjD,QAAU,OAAOV,ICGoBE,aDGjB,WAAsC,IAArCF,EAAoC,uDAA9B4B,EAAmBG,EAAW,uCAC7D,OAAOA,EAAO3B,MACV,IAAK,aAAe,OAAO,2BAAIJ,GAAX,IAAiBX,OAAO0C,EAAOrB,UACnD,QAAU,OAAOV,MCLnBgC,EAAQC,YAAYJ,EAAYK,YAAgBC,MACtDC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.45ce52bc.chunk.js","sourcesContent":["import React  from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { requestRoboInfo } from '../actions'\r\nimport './RoboCard.css'\r\n\r\nclass RoboCard extends React.Component{\r\n    componentDidMount(){\r\n        this.props.requestRoboInfo()\r\n    }\r\n    render(){\r\n    const robots = this.props.roboInfo\r\n    const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(this.props.search.toLowerCase())\r\n    })\r\n    return (\r\n        filteredRobots.map(robot => {\r\n            return(\r\n                <div className=\"card\" key={robot.id}>\r\n                    <img src={this.props.img+robot.id} alt='robotImage'/>\r\n                    <h4> {robot.name}</h4>\r\n                    <p> {robot.email}</p>\r\n                </div>\r\n                   )\r\n                             })\r\n        \r\n            )\r\n            }\r\n}\r\n const mapStateToProps = (state) => {\r\n     return{\r\n         roboInfo:state.reducer.roboInfo,\r\n         img:state.reducer.img,\r\n         search:state.searchChange.search\r\n         }\r\n}\r\n const mapDispatchToProps = (dispatch) => {\r\n     return{\r\n     requestRoboInfo: () => dispatch(requestRoboInfo())\r\n     }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(RoboCard)\r\n","export const requestRoboInfo = () => (dispatch) =>{\r\n    dispatch({type:'IS_PENDING'})\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type:'SUCCESS',payload:data}))\r\n    .catch(error => dispatch({type:'FAILED' , payload:error}))\r\n}\r\nexport const HandelChange = (e) =>{\r\n    return{\r\n        type:'SEARCH_BOX',\r\n        payload:e.target.value\r\n    }\r\n}","import React  from 'react'\nimport RoboCard from './Components/RoboCard/RoboCard'\nimport {connect} from 'react-redux'\nimport {HandelChange} from './Components/actions'\nimport './App.css'\n\n  \nfunction App(props) {\n  return (\n    <div className=\"App\">\n          <h1> HELLO FRIENDS</h1>\n          <input type=\"search\" placeholder=\"Search For Robots By Name ...\" onChange={(e) => props.HandelChange(e)}/>  \n          <div className='cardList' >\n            <RoboCard />\n          </div>\n    </div>\n  );\n}\nconst mapStateToProps =(state) =>{\n  return{\n    search:state.searchChange.search\n  }\n}\nconst  mapDispatchToProps = (dispatch) =>{\n    return{\n      HandelChange: (e)=> dispatch(HandelChange(e)) \n    }\n  }\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n"," const initialState ={\r\n    roboInfo:[],\r\n    img:'https://robohash.org/',\r\n}\r\nexport const reducer = (state=initialState,action) => {\r\n    switch(action.type){\r\n        case 'SUCCESS' : return{...state,roboInfo:action.payload}\r\n        default : return state\r\n    }\r\n}\r\nconst initialSearchState ={\r\n    search:\"\"\r\n}\r\nexport const searchChange = (state=initialSearchState,action) => {\r\n    switch(action.type){\r\n        case 'SEARCH_BOX' : return {...state,search:action.payload}\r\n        default : return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {reducer,searchChange} from './Components/RoboCard/reducer'\nimport { Provider } from 'react-redux';\n\nconst rootReducer = combineReducers({reducer,searchChange})\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware));\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}